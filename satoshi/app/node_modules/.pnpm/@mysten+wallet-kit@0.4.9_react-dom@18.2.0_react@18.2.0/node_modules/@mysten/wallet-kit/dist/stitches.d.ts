/// <reference types="react" />
export declare const styled: <Type extends import("@stitches/react/types/util").Function | keyof JSX.IntrinsicElements | import("react").ComponentType<any>, Composers extends (string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> | {
    [name: string]: unknown;
})[], CSS = import("@stitches/react/types/css-util").CSS<{
    sm: "(min-width: 640px)";
    md: "(min-width: 768px)";
    lg: "(min-width: 1024px)";
}, {
    colors: {
        brand: string;
        brandAccent: string;
        secondary: string;
        secondaryAccent: string;
        textDark: string;
        textLight: string;
        textOnBrand: string;
        background: string;
        backgroundAccent: string;
        backdrop: string;
        backgroundIcon: string;
        icon: string;
        issue: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    radii: {
        modal: string;
        buttonLg: string;
        buttonMd: string;
        wallet: string;
        close: string;
    };
    fontWeights: {
        copy: number;
        button: number;
        title: number;
    };
    transitions: unknown;
    shadows: {
        button: string;
        modal: string;
        wallet: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>(type: Type, ...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : import("@stitches/react/types/util").WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; } : never); }) => import("@stitches/react/types/styled-component").StyledComponent<Type, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    sm: "(min-width: 640px)";
    md: "(min-width: 768px)";
    lg: "(min-width: 1024px)";
}, import("@stitches/react/types/css-util").CSS<{
    sm: "(min-width: 640px)";
    md: "(min-width: 768px)";
    lg: "(min-width: 1024px)";
}, {
    colors: {
        brand: string;
        brandAccent: string;
        secondary: string;
        secondaryAccent: string;
        textDark: string;
        textLight: string;
        textOnBrand: string;
        background: string;
        backgroundAccent: string;
        backdrop: string;
        backgroundIcon: string;
        icon: string;
        issue: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    radii: {
        modal: string;
        buttonLg: string;
        buttonMd: string;
        wallet: string;
        close: string;
    };
    fontWeights: {
        copy: number;
        button: number;
        title: number;
    };
    transitions: unknown;
    shadows: {
        button: string;
        modal: string;
        wallet: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>, css: <Composers extends (string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> | {
    [name: string]: unknown;
})[], CSS = import("@stitches/react/types/css-util").CSS<{
    sm: "(min-width: 640px)";
    md: "(min-width: 768px)";
    lg: "(min-width: 1024px)";
}, {
    colors: {
        brand: string;
        brandAccent: string;
        secondary: string;
        secondaryAccent: string;
        textDark: string;
        textLight: string;
        textOnBrand: string;
        background: string;
        backgroundAccent: string;
        backdrop: string;
        backgroundIcon: string;
        icon: string;
        issue: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    radii: {
        modal: string;
        buttonLg: string;
        buttonMd: string;
        wallet: string;
        close: string;
    };
    fontWeights: {
        copy: number;
        button: number;
        title: number;
    };
    transitions: unknown;
    shadows: {
        button: string;
        modal: string;
        wallet: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : import("@stitches/react/types/util").WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; } : never); }) => import("@stitches/react/types/styled-component").CssComponent<import("@stitches/react/types/styled-component").StyledComponentType<Composers>, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    sm: "(min-width: 640px)";
    md: "(min-width: 768px)";
    lg: "(min-width: 1024px)";
}, CSS>, globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? import("@stitches/react/types/css").AtRule.FontFace | import("@stitches/react/types/css").AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: import("@stitches/react/types/css-util").CSS<{
        sm: "(min-width: 640px)";
        md: "(min-width: 768px)";
        lg: "(min-width: 1024px)";
    }, {
        colors: {
            brand: string;
            brandAccent: string;
            secondary: string;
            secondaryAccent: string;
            textDark: string;
            textLight: string;
            textOnBrand: string;
            background: string;
            backgroundAccent: string;
            backdrop: string;
            backgroundIcon: string;
            icon: string;
            issue: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            10: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        fonts: {
            sans: string;
            mono: string;
        };
        radii: {
            modal: string;
            buttonLg: string;
            buttonMd: string;
            wallet: string;
            close: string;
        };
        fontWeights: {
            copy: number;
            button: number;
            title: number;
        };
        transitions: unknown;
        shadows: {
            button: string;
            modal: string;
            wallet: string;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {}>;
} : K extends `@property ${string}` ? import("@stitches/react/types/css").AtRule.Property : import("@stitches/react/types/css-util").CSS<{
    sm: "(min-width: 640px)";
    md: "(min-width: 768px)";
    lg: "(min-width: 1024px)";
}, {
    colors: {
        brand: string;
        brandAccent: string;
        secondary: string;
        secondaryAccent: string;
        textDark: string;
        textLight: string;
        textOnBrand: string;
        background: string;
        backgroundAccent: string;
        backdrop: string;
        backgroundIcon: string;
        icon: string;
        issue: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
    };
    fontSizes: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    fonts: {
        sans: string;
        mono: string;
    };
    radii: {
        modal: string;
        buttonLg: string;
        buttonMd: string;
        wallet: string;
        close: string;
    };
    fontWeights: {
        copy: number;
        button: number;
        title: number;
    };
    transitions: unknown;
    shadows: {
        button: string;
        modal: string;
        wallet: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>; })[]) => () => string, keyframes: (style: {
    [offset: string]: import("@stitches/react/types/css-util").CSS<{
        sm: "(min-width: 640px)";
        md: "(min-width: 768px)";
        lg: "(min-width: 1024px)";
    }, {
        colors: {
            brand: string;
            brandAccent: string;
            secondary: string;
            secondaryAccent: string;
            textDark: string;
            textLight: string;
            textOnBrand: string;
            background: string;
            backgroundAccent: string;
            backdrop: string;
            backgroundIcon: string;
            icon: string;
            issue: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            10: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        fonts: {
            sans: string;
            mono: string;
        };
        radii: {
            modal: string;
            buttonLg: string;
            buttonMd: string;
            wallet: string;
            close: string;
        };
        fontWeights: {
            copy: number;
            button: number;
            title: number;
        };
        transitions: unknown;
        shadows: {
            button: string;
            modal: string;
            wallet: string;
        };
    }, import("@stitches/react/types/config").DefaultThemeMap, {}>;
}) => {
    (): string;
    name: string;
}, getCssText: () => string, theme: string & {
    className: string;
    selector: string;
} & {
    colors: {
        brand: import("@stitches/react/types/theme").Token<"brand", string, "colors", "">;
        brandAccent: import("@stitches/react/types/theme").Token<"brandAccent", string, "colors", "">;
        secondary: import("@stitches/react/types/theme").Token<"secondary", string, "colors", "">;
        secondaryAccent: import("@stitches/react/types/theme").Token<"secondaryAccent", string, "colors", "">;
        textDark: import("@stitches/react/types/theme").Token<"textDark", string, "colors", "">;
        textLight: import("@stitches/react/types/theme").Token<"textLight", string, "colors", "">;
        textOnBrand: import("@stitches/react/types/theme").Token<"textOnBrand", string, "colors", "">;
        background: import("@stitches/react/types/theme").Token<"background", string, "colors", "">;
        backgroundAccent: import("@stitches/react/types/theme").Token<"backgroundAccent", string, "colors", "">;
        backdrop: import("@stitches/react/types/theme").Token<"backdrop", string, "colors", "">;
        backgroundIcon: import("@stitches/react/types/theme").Token<"backgroundIcon", string, "colors", "">;
        icon: import("@stitches/react/types/theme").Token<"icon", string, "colors", "">;
        issue: import("@stitches/react/types/theme").Token<"issue", string, "colors", "">;
    };
    space: {
        1: import("@stitches/react/types/theme").Token<"1", string, "space", "">;
        2: import("@stitches/react/types/theme").Token<"2", string, "space", "">;
        3: import("@stitches/react/types/theme").Token<"3", string, "space", "">;
        4: import("@stitches/react/types/theme").Token<"4", string, "space", "">;
        5: import("@stitches/react/types/theme").Token<"5", string, "space", "">;
        6: import("@stitches/react/types/theme").Token<"6", string, "space", "">;
        7: import("@stitches/react/types/theme").Token<"7", string, "space", "">;
        8: import("@stitches/react/types/theme").Token<"8", string, "space", "">;
        10: import("@stitches/react/types/theme").Token<"10", string, "space", "">;
    };
    fontSizes: {
        xs: import("@stitches/react/types/theme").Token<"xs", string, "fontSizes", "">;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "fontSizes", "">;
        md: import("@stitches/react/types/theme").Token<"md", string, "fontSizes", "">;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "fontSizes", "">;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "fontSizes", "">;
    };
    fonts: {
        sans: import("@stitches/react/types/theme").Token<"sans", string, "fonts", "">;
        mono: import("@stitches/react/types/theme").Token<"mono", string, "fonts", "">;
    };
    radii: {
        modal: import("@stitches/react/types/theme").Token<"modal", string, "radii", "">;
        buttonLg: import("@stitches/react/types/theme").Token<"buttonLg", string, "radii", "">;
        buttonMd: import("@stitches/react/types/theme").Token<"buttonMd", string, "radii", "">;
        wallet: import("@stitches/react/types/theme").Token<"wallet", string, "radii", "">;
        close: import("@stitches/react/types/theme").Token<"close", string, "radii", "">;
    };
    fontWeights: {
        copy: import("@stitches/react/types/theme").Token<"copy", string, "fontWeights", "">;
        button: import("@stitches/react/types/theme").Token<"button", string, "fontWeights", "">;
        title: import("@stitches/react/types/theme").Token<"title", string, "fontWeights", "">;
    };
    transitions: {};
    shadows: {
        button: import("@stitches/react/types/theme").Token<"button", string, "shadows", "">;
        modal: import("@stitches/react/types/theme").Token<"modal", string, "shadows", "">;
        wallet: import("@stitches/react/types/theme").Token<"wallet", string, "shadows", "">;
    };
}, createTheme: <Argument0 extends string | ({
    colors?: {
        brand?: string | number | boolean | undefined;
        brandAccent?: string | number | boolean | undefined;
        secondary?: string | number | boolean | undefined;
        secondaryAccent?: string | number | boolean | undefined;
        textDark?: string | number | boolean | undefined;
        textLight?: string | number | boolean | undefined;
        textOnBrand?: string | number | boolean | undefined;
        background?: string | number | boolean | undefined;
        backgroundAccent?: string | number | boolean | undefined;
        backdrop?: string | number | boolean | undefined;
        backgroundIcon?: string | number | boolean | undefined;
        icon?: string | number | boolean | undefined;
        issue?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        sans?: string | number | boolean | undefined;
        mono?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        modal?: string | number | boolean | undefined;
        buttonLg?: string | number | boolean | undefined;
        buttonMd?: string | number | boolean | undefined;
        wallet?: string | number | boolean | undefined;
        close?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        copy?: string | number | boolean | undefined;
        button?: string | number | boolean | undefined;
        title?: string | number | boolean | undefined;
    } | undefined;
    transitions?: {} | undefined;
    shadows?: {
        button?: string | number | boolean | undefined;
        modal?: string | number | boolean | undefined;
        wallet?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    colors?: {
        brand?: string | number | boolean | undefined;
        brandAccent?: string | number | boolean | undefined;
        secondary?: string | number | boolean | undefined;
        secondaryAccent?: string | number | boolean | undefined;
        textDark?: string | number | boolean | undefined;
        textLight?: string | number | boolean | undefined;
        textOnBrand?: string | number | boolean | undefined;
        background?: string | number | boolean | undefined;
        backgroundAccent?: string | number | boolean | undefined;
        backdrop?: string | number | boolean | undefined;
        backgroundIcon?: string | number | boolean | undefined;
        icon?: string | number | boolean | undefined;
        issue?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        sans?: string | number | boolean | undefined;
        mono?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        modal?: string | number | boolean | undefined;
        buttonLg?: string | number | boolean | undefined;
        buttonMd?: string | number | boolean | undefined;
        wallet?: string | number | boolean | undefined;
        close?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        copy?: string | number | boolean | undefined;
        button?: string | number | boolean | undefined;
        title?: string | number | boolean | undefined;
    } | undefined;
    transitions?: {} | undefined;
    shadows?: {
        button?: string | number | boolean | undefined;
        modal?: string | number | boolean | undefined;
        wallet?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? import("@stitches/react/types/stitches").ThemeTokens<Argument1, ""> : import("@stitches/react/types/stitches").ThemeTokens<Argument0, "">), config: {
    prefix: "";
    media: {
        sm: "(min-width: 640px)";
        md: "(min-width: 768px)";
        lg: "(min-width: 1024px)";
    };
    theme: {
        colors: {
            brand: string;
            brandAccent: string;
            secondary: string;
            secondaryAccent: string;
            textDark: string;
            textLight: string;
            textOnBrand: string;
            background: string;
            backgroundAccent: string;
            backdrop: string;
            backgroundIcon: string;
            icon: string;
            issue: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            10: string;
        };
        fontSizes: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        fonts: {
            sans: string;
            mono: string;
        };
        radii: {
            modal: string;
            buttonLg: string;
            buttonMd: string;
            wallet: string;
            close: string;
        };
        fontWeights: {
            copy: number;
            button: number;
            title: number;
        };
        transitions: unknown;
        shadows: {
            button: string;
            modal: string;
            wallet: string;
        };
    };
    themeMap: import("@stitches/react/types/config").DefaultThemeMap;
    utils: {};
};
