// src/index.tsx
import { StandardWalletAdapter } from "@mysten/wallet-adapter-wallet-standard";

// src/ConnectButton.tsx
import { useState as useState2 } from "react";

// src/ConnectModal.tsx
import { Dialog as Dialog2 } from "@headlessui/react";
import { useEffect as useEffect2, useState } from "react";

// src/stitches.tsx
import { createStitches } from "@stitches/react";
var BASE_UNIT = 4;
var makeSize = (amount) => `${amount * BASE_UNIT}px`;
var {
  styled,
  css,
  globalCss,
  keyframes,
  getCssText,
  theme,
  createTheme,
  config
} = createStitches({
  media: {
    sm: "(min-width: 640px)",
    md: "(min-width: 768px)",
    lg: "(min-width: 1024px)"
  },
  theme: {
    colors: {
      brand: "#0284AD",
      brandAccent: "#007195",
      secondary: "#C3C5C8",
      secondaryAccent: "#636870",
      textDark: "#182435",
      textLight: "#767A81",
      textOnBrand: "#fff",
      background: "#fff",
      backgroundAccent: "#F7F8F8",
      backdrop: "rgba(24 36 53 / 20%)",
      backgroundIcon: "#F0F1F2",
      icon: "#383F47",
      issue: "#FF794B"
    },
    space: {
      1: makeSize(1),
      2: makeSize(2),
      3: makeSize(3),
      4: makeSize(4),
      5: makeSize(5),
      6: makeSize(6),
      7: makeSize(7),
      8: makeSize(8),
      10: makeSize(10)
    },
    fontSizes: {
      xs: "13px",
      sm: "14px",
      md: "16px",
      lg: "18px",
      xl: "20px"
    },
    fonts: {
      sans: 'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"',
      mono: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace'
    },
    radii: {
      modal: "16px",
      buttonLg: "12px",
      buttonMd: "8px",
      wallet: "8px",
      close: "9999px"
    },
    fontWeights: {
      copy: 500,
      button: 600,
      title: 600
    },
    transitions: {},
    shadows: {
      button: "0px 4px 12px rgba(0, 0, 0, 0.1)",
      modal: "0px 0px 44px rgba(0, 0, 0, 0.15)",
      wallet: "0px 2px 6px rgba(0, 0, 0, 0.05)"
    }
  }
});

// src/utils/ui.tsx
var Button = styled("button", {
  cursor: "pointer",
  border: "none",
  fontFamily: "$sans",
  fontWeight: "$button",
  fontSize: "$sm",
  textDecoration: "none",
  variants: {
    size: {
      md: {
        padding: "$2 $4",
        borderRadius: "$buttonMd"
      },
      lg: {
        padding: "$4 $6",
        borderRadius: "$buttonLg"
      }
    },
    color: {
      primary: {
        backgroundColor: "$brand",
        color: "$textOnBrand",
        "&:hover": {
          backgroundColor: "$brandAccent"
        },
        boxShadow: "$button"
      },
      secondary: {
        backgroundColor: "transparent",
        border: "1px solid $secondary",
        color: "$secondaryAccent"
      },
      connected: {
        boxShadow: "$button",
        backgroundColor: "$background",
        color: "$textDark"
      }
    }
  },
  defaultVariants: {
    size: "md"
  }
});
var Panel = styled("div", {
  flex: 1,
  boxSizing: "border-box",
  padding: "$5",
  display: "flex",
  flexDirection: "column",
  variants: {
    responsiveHidden: {
      true: {
        display: "none",
        "@md": { display: "flex" }
      }
    }
  }
});
var Truncate = styled("div", {
  overflow: "hidden",
  textOverflow: "ellipsis",
  whiteSpace: "nowrap"
});
var CopyContainer = styled("div", {
  display: "flex",
  flexDirection: "column",
  gap: "$5",
  marginBottom: "$4"
});
var Heading = styled("h3", {
  color: "$textDark",
  fontSize: "$sm",
  margin: 0,
  marginBottom: "$1"
});
var Description = styled("div", {
  color: "$textLight",
  fontSize: "$sm",
  fontWeight: "$copy",
  lineHeight: "1.3"
});

// src/utils/icons.tsx
import { jsx, jsxs } from "react/jsx-runtime";
function BackIcon(props) {
  return /* @__PURE__ */ jsx(
    "svg",
    {
      width: 24,
      height: 24,
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ...props,
      children: /* @__PURE__ */ jsx(
        "path",
        {
          d: "M7.57 12.262c0 .341.13.629.403.895l5.175 5.059c.204.205.45.307.751.307.609 0 1.101-.485 1.101-1.087 0-.293-.123-.574-.349-.8L10.14 12.27l4.511-4.375A1.13 1.13 0 0 0 15 7.087C15 6.485 14.508 6 13.9 6c-.295 0-.54.103-.752.308l-5.175 5.058c-.28.28-.404.56-.404.896Z",
          fill: "#383F47"
        }
      )
    }
  );
}
function CloseIcon(props) {
  return /* @__PURE__ */ jsx(
    "svg",
    {
      width: 10,
      height: 10,
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ...props,
      children: /* @__PURE__ */ jsx(
        "path",
        {
          d: "M9.708.292a.999.999 0 0 0-1.413 0l-3.289 3.29L1.717.291A.999.999 0 0 0 .305 1.705l3.289 3.289-3.29 3.289a.999.999 0 1 0 1.413 1.412l3.29-3.289 3.288 3.29a.999.999 0 0 0 1.413-1.413l-3.29-3.29 3.29-3.288a.999.999 0 0 0 0-1.413Z",
          fill: "currentColor"
        }
      )
    }
  );
}
function SuiIcon(props) {
  return /* @__PURE__ */ jsxs(
    "svg",
    {
      width: 28,
      height: 28,
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ...props,
      children: [
        /* @__PURE__ */ jsx("rect", { width: 28, height: 28, rx: 6, fill: "#6FBCF0" }),
        /* @__PURE__ */ jsx(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M7.942 20.527A6.875 6.875 0 0 0 13.957 24c2.51 0 4.759-1.298 6.015-3.473a6.875 6.875 0 0 0 0-6.945l-5.29-9.164a.837.837 0 0 0-1.45 0l-5.29 9.164a6.875 6.875 0 0 0 0 6.945Zm4.524-11.75 1.128-1.953a.418.418 0 0 1 .725 0l4.34 7.516a5.365 5.365 0 0 1 .449 4.442 4.675 4.675 0 0 0-.223-.73c-.599-1.512-1.954-2.68-4.029-3.47-1.426-.54-2.336-1.336-2.706-2.364-.476-1.326.021-2.77.316-3.44Zm-1.923 3.332L9.255 14.34a5.373 5.373 0 0 0 0 5.43 5.373 5.373 0 0 0 4.702 2.714 5.38 5.38 0 0 0 3.472-1.247c.125-.314.51-1.462.034-2.646-.44-1.093-1.5-1.965-3.15-2.594-1.864-.707-3.076-1.811-3.6-3.28a4.601 4.601 0 0 1-.17-.608Z",
            fill: "#fff"
          }
        )
      ]
    }
  );
}
function CheckIcon(props) {
  return /* @__PURE__ */ jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: 16,
      height: 16,
      fill: "none",
      ...props,
      children: /* @__PURE__ */ jsx(
        "path",
        {
          fill: "#007195",
          d: "m11.726 5.048-4.73 5.156-1.722-1.879a.72.72 0 0 0-.529-.23.722.722 0 0 0-.525.24.858.858 0 0 0-.22.573.86.86 0 0 0 .211.576l2.255 2.458c.14.153.332.24.53.24.2 0 .391-.087.532-.24l5.261-5.735A.86.86 0 0 0 13 5.63a.858.858 0 0 0-.22-.572.722.722 0 0 0-.525-.24.72.72 0 0 0-.529.23Z"
        }
      )
    }
  );
}
function ChevronIcon(props) {
  return /* @__PURE__ */ jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: 16,
      height: 16,
      fill: "none",
      ...props,
      children: /* @__PURE__ */ jsx(
        "path",
        {
          stroke: "#A0B6C3",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: 1.5,
          d: "m4 6 4 4 4-4"
        }
      )
    }
  );
}

// src/WhatIsAWallet.tsx
import { jsx as jsx2, jsxs as jsxs2 } from "react/jsx-runtime";
function WhatIsAWallet() {
  return /* @__PURE__ */ jsxs2(CopyContainer, { children: [
    /* @__PURE__ */ jsxs2("div", { children: [
      /* @__PURE__ */ jsx2(Heading, { children: "Easy Login" }),
      /* @__PURE__ */ jsx2(Description, { children: "No need to create new accounts and passwords for every website. Just connect your wallet and get going." })
    ] }),
    /* @__PURE__ */ jsxs2("div", { children: [
      /* @__PURE__ */ jsx2(Heading, { children: "Store your Digital Assets" }),
      /* @__PURE__ */ jsx2(Description, { children: "Send, receive, store, and display your digital assets like NFTs & coins." })
    ] })
  ] });
}

// src/utils/Dialog.tsx
import { Dialog } from "@headlessui/react";
import { jsx as jsx3 } from "react/jsx-runtime";
var Title = styled(
  (props) => /* @__PURE__ */ jsx3(Dialog.Title, { ...props }),
  {
    margin: 0,
    padding: "0 $2",
    fontSize: "$lg",
    fontWeight: "$title",
    color: "$textDark"
  }
);
var Overlay = styled("div", {
  backgroundColor: "$backdrop",
  position: "fixed",
  inset: 0,
  zIndex: 100
});
var Content = styled("div", {
  position: "fixed",
  inset: 0,
  zIndex: 100,
  height: "100%",
  fontFamily: "$sans",
  display: "flex",
  justifyContent: "center",
  alignItems: "flex-end",
  padding: "$4",
  boxSizing: "border-box",
  pointerEvents: "none!important",
  "@md": {
    alignItems: "center"
  }
});
var Body = styled(
  (props) => /* @__PURE__ */ jsx3(Dialog.Panel, { ...props }),
  {
    position: "relative",
    overflow: "hidden",
    backgroundColor: "$background",
    borderRadius: "$modal",
    boxShadow: "$modal",
    display: "flex",
    flexDirection: "column",
    pointerEvents: "auto",
    variants: {
      connect: {
        true: {
          width: "100%",
          minHeight: "50vh",
          maxWidth: "700px",
          maxHeight: "85vh",
          "@md": {
            flexDirection: "row"
          }
        }
      }
    }
  }
);
var Close = styled("button", {
  position: "absolute",
  cursor: "pointer",
  padding: 7,
  top: "$4",
  right: "$4",
  display: "flex",
  border: "none",
  alignItems: "center",
  justifyContent: "center",
  color: "$icon",
  backgroundColor: "$backgroundIcon",
  borderRadius: "$close"
});
function CloseButton({ onClick }) {
  return /* @__PURE__ */ jsx3(Close, { "aria-label": "Close", onClick, children: /* @__PURE__ */ jsx3(CloseIcon, {}) });
}

// src/WalletKitContext.tsx
import {
  createContext,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useSyncExternalStore
} from "react";
import {
  createWalletKitCore
} from "@mysten/wallet-kit-core";
import { WalletStandardAdapterProvider } from "@mysten/wallet-adapter-wallet-standard";
import { UnsafeBurnerWalletAdapter } from "@mysten/wallet-adapter-unsafe-burner";
import { jsx as jsx4 } from "react/jsx-runtime";
var WalletKitContext = createContext(null);
function WalletKitProvider({
  adapters: configuredAdapters,
  preferredWallets,
  children,
  enableUnsafeBurner,
  storageAdapter,
  storageKey,
  disableAutoConnect,
  features
}) {
  const adapters = useMemo(
    () => configuredAdapters ?? [
      new WalletStandardAdapterProvider({ features }),
      ...enableUnsafeBurner ? [new UnsafeBurnerWalletAdapter()] : []
    ],
    [configuredAdapters]
  );
  const walletKitRef = useRef(null);
  if (!walletKitRef.current) {
    walletKitRef.current = createWalletKitCore({
      adapters,
      preferredWallets,
      storageAdapter,
      storageKey
    });
  }
  const { wallets } = useSyncExternalStore(
    walletKitRef.current.subscribe,
    walletKitRef.current.getState,
    walletKitRef.current.getState
  );
  useEffect(() => {
    if (!disableAutoConnect) {
      walletKitRef.current?.autoconnect();
    }
  }, [wallets]);
  return /* @__PURE__ */ jsx4(WalletKitContext.Provider, { value: walletKitRef.current, children });
}
function useWalletKit() {
  const walletKit = useContext(WalletKitContext);
  if (!walletKit) {
    throw new Error(
      "You must call `useWalletKit` within the of the `WalletKitProvider`."
    );
  }
  const state = useSyncExternalStore(
    walletKit.subscribe,
    walletKit.getState,
    walletKit.getState
  );
  return useMemo(
    () => ({
      connect: walletKit.connect,
      disconnect: walletKit.disconnect,
      signMessage: walletKit.signMessage,
      signTransactionBlock: walletKit.signTransactionBlock,
      signAndExecuteTransactionBlock: walletKit.signAndExecuteTransactionBlock,
      selectAccount: walletKit.selectAccount,
      ...state
    }),
    [walletKit, state]
  );
}

// src/WalletList.tsx
import { jsx as jsx5, jsxs as jsxs3 } from "react/jsx-runtime";
var Container = styled(Panel, {
  background: "$background",
  height: "100%",
  "@md": {
    background: "$backgroundAccent"
  }
});
var ListContainer = styled("div", {
  marginTop: "$6",
  display: "flex",
  flexDirection: "column",
  gap: "$1"
});
var WalletItem = styled("button", {
  background: "none",
  display: "flex",
  padding: "$2",
  gap: "$2",
  alignItems: "center",
  cursor: "pointer",
  color: "$textDark",
  border: "none",
  fontWeight: "$button",
  fontSize: "$md",
  borderRadius: "$wallet",
  variants: {
    selected: {
      true: {
        background: "$background",
        boxShadow: "$wallet"
      }
    }
  }
});
var WalletIcon = styled("img", {
  flexShrink: 0,
  background: "white",
  width: 28,
  height: 28,
  borderRadius: 6,
  objectFit: "cover"
});
var SELECTED_GETTING_STARTED = "@@internal/getting-started";
function WalletList({ selected, onChange }) {
  const { wallets } = useWalletKit();
  return /* @__PURE__ */ jsxs3(Container, { children: [
    /* @__PURE__ */ jsx5(Title, { children: "Connect a Wallet" }),
    /* @__PURE__ */ jsx5(ListContainer, { children: wallets.length === 0 ? /* @__PURE__ */ jsxs3(
      WalletItem,
      {
        onClick: () => onChange(SELECTED_GETTING_STARTED),
        selected: { "@initial": false, "@md": true },
        children: [
          /* @__PURE__ */ jsx5(SuiIcon, {}),
          /* @__PURE__ */ jsx5(Truncate, { children: "Sui Wallet" })
        ]
      }
    ) : wallets.map((wallet) => /* @__PURE__ */ jsxs3(
      WalletItem,
      {
        selected: wallet.name === selected,
        onClick: () => {
          onChange(wallet.name);
        },
        children: [
          /* @__PURE__ */ jsx5(WalletIcon, { src: wallet.icon }),
          /* @__PURE__ */ jsx5(Truncate, { children: wallet.name })
        ]
      },
      wallet.name
    )) })
  ] });
}

// src/GettingStarted.tsx
import { jsx as jsx6, jsxs as jsxs4 } from "react/jsx-runtime";
function GettingStarted() {
  return /* @__PURE__ */ jsxs4(CopyContainer, { children: [
    /* @__PURE__ */ jsxs4("div", { children: [
      /* @__PURE__ */ jsx6(Heading, { children: "Install the Sui extension" }),
      /* @__PURE__ */ jsx6(Description, { children: "We recommend pinning the Sui Wallet to your taskbar for quicker access." })
    ] }),
    /* @__PURE__ */ jsxs4("div", { children: [
      /* @__PURE__ */ jsx6(Heading, { children: "Create or Import a Wallet" }),
      /* @__PURE__ */ jsx6(Description, { children: "Be sure to back up your wallet using a secure method. Never share your secret phrase with anyone." })
    ] }),
    /* @__PURE__ */ jsxs4("div", { children: [
      /* @__PURE__ */ jsx6(Heading, { children: "Refresh Your Browser" }),
      /* @__PURE__ */ jsx6(Description, { children: "Once you set up your wallet, refresh this window browser to load up the extension." })
    ] })
  ] });
}

// src/ConnectModal.tsx
import { Fragment, jsx as jsx7, jsxs as jsxs5 } from "react/jsx-runtime";
var BackButton = styled("button", {
  position: "absolute",
  cursor: "pointer",
  top: "$4",
  left: "$4",
  display: "flex",
  border: "none",
  alignItems: "center",
  justifyContent: "center",
  color: "$icon",
  backgroundColor: "transparent",
  "@md": {
    display: "none"
  }
});
var BodyCopy = styled("div", {
  padding: "$10",
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  alignItems: "center",
  flex: 1
});
var SelectedWalletIcon = styled("img", {
  background: "white",
  objectFit: "cover",
  width: 72,
  height: 72,
  borderRadius: 16
});
var ButtonContainer = styled("div", {
  position: "absolute",
  bottom: "$8",
  right: "$8",
  marginTop: "$4"
});
var LeftPanel = styled("div", {
  display: "flex",
  flexDirection: "column",
  width: "100%",
  flex: 1,
  "@md": {
    flex: 0,
    minWidth: 240
  },
  variants: {
    hasSelected: {
      true: {
        display: "none",
        "@md": {
          display: "block"
        }
      }
    }
  }
});
var OpeningWalletTitle = styled("div", {
  marginTop: "$3",
  marginBottom: "$1",
  color: "$textDark",
  fontSize: "$xl",
  fontWeight: "$title"
});
var ConnectionText = styled("div", {
  fontSize: "$xs",
  variants: {
    isError: {
      true: {
        color: "$issue"
      },
      false: {
        color: "$textLight"
      }
    }
  },
  defaultVariants: {
    isError: false
  }
});
var MobileInfoButton = styled("button", {
  background: "$backgroundAccent",
  textAlign: "center",
  width: "100%",
  padding: "$4",
  border: "none",
  color: "$textLight",
  fontWeight: "$button",
  fontFamily: "$sans",
  cursor: "pointer",
  "@md": {
    display: "none"
  }
});
var SELECTED_INFO = "@@internal/what-is-wallet";
function ConnectModal({ open, onClose }) {
  const { connect, currentWallet, isConnected, isError } = useWalletKit();
  const [selected, setSelected] = useState(null);
  useEffect2(() => {
    if (!open) {
      setSelected(null);
    }
  }, [open]);
  useEffect2(() => {
    if (isConnected && currentWallet?.name === selected) {
      onClose();
    }
  }, [currentWallet, selected, isConnected]);
  return /* @__PURE__ */ jsxs5(Dialog2, { open, onClose, children: [
    /* @__PURE__ */ jsx7(Overlay, {}),
    /* @__PURE__ */ jsx7(Content, { children: /* @__PURE__ */ jsxs5(Body, { connect: true, children: [
      /* @__PURE__ */ jsxs5(LeftPanel, { hasSelected: !!selected, children: [
        /* @__PURE__ */ jsx7(
          WalletList,
          {
            selected,
            onChange: (walletName) => {
              setSelected(walletName);
              connect(walletName);
            }
          }
        ),
        /* @__PURE__ */ jsx7(MobileInfoButton, { onClick: () => setSelected(SELECTED_INFO), children: "What is a Wallet" })
      ] }),
      /* @__PURE__ */ jsxs5(Panel, { responsiveHidden: !selected, children: [
        /* @__PURE__ */ jsx7(BackButton, { onClick: () => setSelected(null), "aria-label": "Back", children: /* @__PURE__ */ jsx7(BackIcon, {}) }),
        !selected || selected === SELECTED_INFO ? /* @__PURE__ */ jsxs5(Fragment, { children: [
          /* @__PURE__ */ jsx7(Title, { css: { textAlign: "center" }, children: "What is a Wallet" }),
          /* @__PURE__ */ jsx7(BodyCopy, { children: /* @__PURE__ */ jsx7(WhatIsAWallet, {}) })
        ] }) : selected && selected !== SELECTED_GETTING_STARTED ? /* @__PURE__ */ jsxs5(BodyCopy, { children: [
          /* @__PURE__ */ jsx7(SelectedWalletIcon, { src: currentWallet?.icon }),
          /* @__PURE__ */ jsxs5(OpeningWalletTitle, { children: [
            "Opening ",
            selected
          ] }),
          /* @__PURE__ */ jsx7(ConnectionText, { isError, children: isError ? "Connection failed" : "Confirm connection in the wallet..." }),
          isError && /* @__PURE__ */ jsx7(ButtonContainer, { children: /* @__PURE__ */ jsx7(Button, { color: "secondary", onClick: () => connect(selected), children: "Retry Connection" }) })
        ] }) : /* @__PURE__ */ jsxs5(Fragment, { children: [
          /* @__PURE__ */ jsx7(Title, { css: { textAlign: "center" }, children: "Get Started with Sui" }),
          /* @__PURE__ */ jsxs5(BodyCopy, { children: [
            /* @__PURE__ */ jsx7(GettingStarted, {}),
            /* @__PURE__ */ jsx7(ButtonContainer, { children: /* @__PURE__ */ jsx7(
              Button,
              {
                as: "a",
                color: "secondary",
                href: "https://chrome.google.com/webstore/detail/sui-wallet/opcgpfmipidbgpenhmajoajpbobppdil",
                target: "_blank",
                rel: "noopener noreferrer",
                children: "Install Wallet Extension"
              }
            ) })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsx7(CloseButton, { onClick: onClose })
    ] }) })
  ] });
}

// src/ConnectButton.tsx
import { Menu } from "@headlessui/react";
import { formatAddress } from "@mysten/sui.js";
import { styled as styled2 } from "@stitches/react";
import { Fragment as Fragment2, jsx as jsx8, jsxs as jsxs6 } from "react/jsx-runtime";
var MenuItems = styled2(Menu.Items, {
  position: "absolute",
  right: 0,
  marginTop: "$1",
  width: 180,
  maxHeight: 200,
  overflow: "scroll",
  borderRadius: "$buttonLg",
  backgroundColor: "$background",
  color: "$textDark",
  boxShadow: "$button",
  zIndex: 10,
  padding: "$2",
  display: "flex",
  flexDirection: "column",
  gap: "$2"
});
var Account = styled2("button", {
  border: 0,
  display: "flex",
  justifyContent: "space-between",
  alignItems: "center",
  backgroundColor: "white",
  fontFamily: "$mono",
  padding: "$2",
  color: "#758F9E",
  cursor: "pointer",
  textAlign: "left",
  fontSize: 14,
  borderRadius: 3,
  "&:hover": {
    color: "#0284AD",
    backgroundColor: "#E1F3FF80"
  },
  variants: {
    active: {
      true: {
        color: "#007195"
      }
    }
  }
});
function ConnectButton({
  connectText = "Connect Wallet",
  connectedText,
  ...props
}) {
  const [connectModalOpen, setConnectModalOpen] = useState2(false);
  const { currentAccount, accounts, selectAccount, disconnect } = useWalletKit();
  return /* @__PURE__ */ jsxs6(Fragment2, { children: [
    currentAccount ? /* @__PURE__ */ jsxs6(
      Menu,
      {
        as: "div",
        style: { position: "relative", display: "inline-block" },
        children: [
          /* @__PURE__ */ jsxs6(
            Menu.Button,
            {
              as: Button,
              color: "connected",
              size: "lg",
              css: {
                fontFamily: "$mono",
                display: "inline-flex",
                justifyContent: "space-between",
                alignItems: "center",
                gap: "$2"
              },
              type: "button",
              children: [
                connectedText ?? formatAddress(currentAccount.address),
                /* @__PURE__ */ jsx8(ChevronIcon, {})
              ]
            }
          ),
          /* @__PURE__ */ jsxs6(MenuItems, { children: [
            accounts.map((account) => /* @__PURE__ */ jsx8(Menu.Item, { children: /* @__PURE__ */ jsxs6(
              Account,
              {
                active: account.address === currentAccount.address,
                onClick: () => selectAccount(account),
                children: [
                  formatAddress(account.address),
                  account.address === currentAccount.address && /* @__PURE__ */ jsx8(CheckIcon, {})
                ]
              }
            ) }, account.address)),
            /* @__PURE__ */ jsx8(
              "div",
              {
                style: {
                  marginTop: 4,
                  marginBottom: 4,
                  height: 1,
                  background: "#F3F6F8",
                  flexShrink: 0
                }
              }
            ),
            /* @__PURE__ */ jsx8(Menu.Item, { children: /* @__PURE__ */ jsx8(
              Account,
              {
                css: { fontFamily: "$sans" },
                onClick: () => disconnect(),
                children: "Disconnect"
              }
            ) })
          ] })
        ]
      }
    ) : /* @__PURE__ */ jsx8(
      Button,
      {
        color: "primary",
        size: "lg",
        onClick: () => setConnectModalOpen(true),
        type: "button",
        ...props,
        children: connectText
      }
    ),
    !currentAccount && /* @__PURE__ */ jsx8(
      ConnectModal,
      {
        open: connectModalOpen,
        onClose: () => setConnectModalOpen(false)
      }
    )
  ] });
}
export {
  ConnectButton,
  ConnectModal,
  StandardWalletAdapter,
  WalletKitContext,
  WalletKitProvider,
  useWalletKit
};
//# sourceMappingURL=index.mjs.map