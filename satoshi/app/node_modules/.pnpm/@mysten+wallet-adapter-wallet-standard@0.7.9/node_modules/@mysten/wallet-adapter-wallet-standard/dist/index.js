"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DEFAULT_FEATURES: () => DEFAULT_FEATURES,
  StandardWalletAdapter: () => StandardWalletAdapter,
  WalletStandardAdapterProvider: () => WalletStandardAdapterProvider
});
module.exports = __toCommonJS(src_exports);
var import_wallet_standard = require("@mysten/wallet-standard");

// src/StandardWalletAdapter.ts
var import_mitt = __toESM(require("mitt"));
var suiSignTransactionBlockLatestVersion = "1.0.0";
var suiSignAndExecuteTransactionBlockLatestVersion = "1.0.0";
function isFeatureCompatible(featureVersion, adapterVersion) {
  const [featureMajor] = featureVersion.split(".");
  const [adapterMajor] = adapterVersion.split(".");
  return +adapterMajor === +featureMajor;
}
var _events, _wallet, _walletEventUnsubscribe, _notifyChanged, notifyChanged_fn;
var StandardWalletAdapter = class {
  constructor({ wallet }) {
    __privateAdd(this, _notifyChanged);
    this.connected = false;
    this.connecting = false;
    __privateAdd(this, _events, (0, import_mitt.default)());
    __privateAdd(this, _wallet, void 0);
    __privateAdd(this, _walletEventUnsubscribe, null);
    this.signMessage = (messageInput) => {
      return __privateGet(this, _wallet).features["sui:signMessage"].signMessage(messageInput);
    };
    this.signTransactionBlock = (transactionInput) => {
      const version = __privateGet(this, _wallet).features["sui:signTransactionBlock"].version;
      if (!isFeatureCompatible(version, suiSignTransactionBlockLatestVersion)) {
        throw new Error(
          `Version mismatch, signTransaction feature version ${version} is not compatible with version ${suiSignTransactionBlockLatestVersion}`
        );
      }
      return __privateGet(this, _wallet).features["sui:signTransactionBlock"].signTransactionBlock(transactionInput);
    };
    this.signAndExecuteTransactionBlock = (transactionInput) => {
      const version = __privateGet(this, _wallet).features["sui:signAndExecuteTransactionBlock"].version;
      if (!isFeatureCompatible(
        version,
        suiSignAndExecuteTransactionBlockLatestVersion
      )) {
        throw new Error(
          `Version mismatch, signAndExecuteTransactionBlock feature version ${version} is not compatible with version ${suiSignAndExecuteTransactionBlockLatestVersion}`
        );
      }
      return __privateGet(this, _wallet).features["sui:signAndExecuteTransactionBlock"].signAndExecuteTransactionBlock(transactionInput);
    };
    this.on = (event, callback) => {
      __privateGet(this, _events).on(event, callback);
      return () => {
        __privateGet(this, _events).off(event, callback);
      };
    };
    __privateSet(this, _wallet, wallet);
  }
  get name() {
    return __privateGet(this, _wallet).name;
  }
  get icon() {
    return __privateGet(this, _wallet).icon;
  }
  get wallet() {
    return __privateGet(this, _wallet);
  }
  async getAccounts() {
    return __privateGet(this, _wallet).accounts;
  }
  async connect() {
    try {
      if (this.connected || this.connecting)
        return;
      this.connecting = true;
      __privateSet(this, _walletEventUnsubscribe, __privateGet(this, _wallet).features["standard:events"].on("change", async ({ accounts }) => {
        if (accounts) {
          this.connected = accounts.length > 0;
          await __privateMethod(this, _notifyChanged, notifyChanged_fn).call(this);
        }
      }));
      if (!__privateGet(this, _wallet).accounts.length) {
        await __privateGet(this, _wallet).features["standard:connect"].connect();
      }
      if (!__privateGet(this, _wallet).accounts.length) {
        throw new Error("No wallet accounts found");
      }
      this.connected = true;
      await __privateMethod(this, _notifyChanged, notifyChanged_fn).call(this);
    } finally {
      this.connecting = false;
    }
  }
  async disconnect() {
    if (__privateGet(this, _wallet).features["standard:disconnect"]) {
      await __privateGet(this, _wallet).features["standard:disconnect"].disconnect();
    }
    this.connected = false;
    this.connecting = false;
    if (__privateGet(this, _walletEventUnsubscribe)) {
      __privateGet(this, _walletEventUnsubscribe).call(this);
      __privateSet(this, _walletEventUnsubscribe, null);
    }
  }
};
_events = new WeakMap();
_wallet = new WeakMap();
_walletEventUnsubscribe = new WeakMap();
_notifyChanged = new WeakSet();
notifyChanged_fn = async function() {
  __privateGet(this, _events).emit("change", {
    connected: this.connected,
    accounts: await this.getAccounts()
  });
};

// src/index.ts
var import_mitt2 = __toESM(require("mitt"));
var DEFAULT_FEATURES = ["sui:signAndExecuteTransactionBlock"];
var _wallets, _adapters, _events2, _features;
var WalletStandardAdapterProvider = class {
  constructor({ features } = {}) {
    __privateAdd(this, _wallets, void 0);
    __privateAdd(this, _adapters, void 0);
    __privateAdd(this, _events2, void 0);
    __privateAdd(this, _features, void 0);
    __privateSet(this, _adapters, /* @__PURE__ */ new Map());
    __privateSet(this, _wallets, (0, import_wallet_standard.getWallets)());
    __privateSet(this, _events2, (0, import_mitt2.default)());
    __privateSet(this, _features, features ?? DEFAULT_FEATURES);
    __privateGet(this, _wallets).on("register", () => {
      __privateGet(this, _events2).emit("changed");
    });
    __privateGet(this, _wallets).on("unregister", () => {
      __privateGet(this, _events2).emit("changed");
    });
  }
  get() {
    const filtered = __privateGet(this, _wallets).get().filter(
      (wallet) => (0, import_wallet_standard.isStandardWalletAdapterCompatibleWallet)(wallet, __privateGet(this, _features))
    );
    filtered.forEach((wallet) => {
      if (!__privateGet(this, _adapters).has(wallet)) {
        __privateGet(this, _adapters).set(wallet, new StandardWalletAdapter({ wallet }));
      }
    });
    return [...__privateGet(this, _adapters).values()];
  }
  on(eventName, callback) {
    __privateGet(this, _events2).on(eventName, callback);
    return () => {
      __privateGet(this, _events2).off(eventName, callback);
    };
  }
};
_wallets = new WeakMap();
_adapters = new WeakMap();
_events2 = new WeakMap();
_features = new WeakMap();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_FEATURES,
  StandardWalletAdapter,
  WalletStandardAdapterProvider
});
//# sourceMappingURL=index.js.map