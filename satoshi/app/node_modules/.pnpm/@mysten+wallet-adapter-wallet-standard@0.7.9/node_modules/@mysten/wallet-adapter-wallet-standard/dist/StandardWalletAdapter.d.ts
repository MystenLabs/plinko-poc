import { WalletAdapter, WalletAdapterEvents } from "@mysten/wallet-adapter-base";
import { StandardWalletAdapterWallet } from "@mysten/wallet-standard";
export interface StandardWalletAdapterConfig {
    wallet: StandardWalletAdapterWallet;
}
export declare class StandardWalletAdapter implements WalletAdapter {
    #private;
    connected: boolean;
    connecting: boolean;
    constructor({ wallet }: StandardWalletAdapterConfig);
    get name(): string;
    get icon(): `data:image/svg+xml;base64,${string}` | `data:image/webp;base64,${string}` | `data:image/png;base64,${string}` | `data:image/gif;base64,${string}`;
    get wallet(): StandardWalletAdapterWallet;
    getAccounts(): Promise<readonly import("@mysten/wallet-standard").WalletAccount[]>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    signMessage: WalletAdapter["signMessage"];
    signTransactionBlock: WalletAdapter["signTransactionBlock"];
    signAndExecuteTransactionBlock: WalletAdapter["signAndExecuteTransactionBlock"];
    on: <E extends keyof WalletAdapterEvents>(event: E, callback: WalletAdapterEvents[E]) => () => void;
}
