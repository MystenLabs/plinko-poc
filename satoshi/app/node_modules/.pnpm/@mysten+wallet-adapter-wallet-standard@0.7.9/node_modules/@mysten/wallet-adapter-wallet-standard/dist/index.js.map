{"version":3,"sources":["../src/index.ts","../src/StandardWalletAdapter.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { WalletAdapterProvider } from \"@mysten/wallet-adapter-base\";\nimport {\n  isStandardWalletAdapterCompatibleWallet,\n  StandardWalletAdapterWallet,\n  Wallets,\n  getWallets,\n} from \"@mysten/wallet-standard\";\nimport { StandardWalletAdapter } from \"./StandardWalletAdapter\";\nimport mitt, { Emitter } from \"mitt\";\n\ntype Events = {\n  changed: void;\n};\n\nexport { StandardWalletAdapter };\n\n// These are the default features that the adapter will check for:\nexport const DEFAULT_FEATURES: (keyof StandardWalletAdapterWallet[\"features\"])[] =\n  [\"sui:signAndExecuteTransactionBlock\"];\n\nexport class WalletStandardAdapterProvider implements WalletAdapterProvider {\n  #wallets: Wallets;\n  #adapters: Map<StandardWalletAdapterWallet, StandardWalletAdapter>;\n  #events: Emitter<Events>;\n  #features: string[];\n\n  constructor({ features }: { features?: string[] } = {}) {\n    this.#adapters = new Map();\n    this.#wallets = getWallets();\n    this.#events = mitt();\n    this.#features = features ?? DEFAULT_FEATURES;\n\n    this.#wallets.on(\"register\", () => {\n      this.#events.emit(\"changed\");\n    });\n\n    this.#wallets.on(\"unregister\", () => {\n      this.#events.emit(\"changed\");\n    });\n  }\n\n  get() {\n    const filtered = this.#wallets\n      .get()\n      .filter((wallet) =>\n        isStandardWalletAdapterCompatibleWallet(wallet, this.#features)\n      ) as StandardWalletAdapterWallet[];\n\n    filtered.forEach((wallet) => {\n      if (!this.#adapters.has(wallet)) {\n        this.#adapters.set(wallet, new StandardWalletAdapter({ wallet }));\n      }\n    });\n\n    return [...this.#adapters.values()];\n  }\n\n  on<T extends keyof Events>(\n    eventName: T,\n    callback: (data: Events[T]) => void\n  ) {\n    this.#events.on(eventName, callback);\n    return () => {\n      this.#events.off(eventName, callback);\n    };\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  WalletAdapter,\n  WalletAdapterEvents,\n} from \"@mysten/wallet-adapter-base\";\nimport {\n  StandardWalletAdapterWallet,\n  SuiSignAndExecuteTransactionBlockVersion,\n  SuiSignTransactionBlockVersion,\n} from \"@mysten/wallet-standard\";\nimport mitt from \"mitt\";\n\nexport interface StandardWalletAdapterConfig {\n  wallet: StandardWalletAdapterWallet;\n}\n\ntype WalletAdapterEventsMap = {\n  [E in keyof WalletAdapterEvents]: Parameters<WalletAdapterEvents[E]>[0];\n};\n\nconst suiSignTransactionBlockLatestVersion: SuiSignTransactionBlockVersion =\n  \"1.0.0\";\nconst suiSignAndExecuteTransactionBlockLatestVersion: SuiSignAndExecuteTransactionBlockVersion =\n  \"1.0.0\";\n\nfunction isFeatureCompatible(featureVersion: string, adapterVersion: string) {\n  const [featureMajor] = featureVersion.split(\".\");\n  const [adapterMajor] = adapterVersion.split(\".\");\n  return +adapterMajor === +featureMajor;\n}\n\nexport class StandardWalletAdapter implements WalletAdapter {\n  connected = false;\n  connecting = false;\n\n  readonly #events = mitt<WalletAdapterEventsMap>();\n  #wallet: StandardWalletAdapterWallet;\n  #walletEventUnsubscribe: (() => void) | null = null;\n\n  constructor({ wallet }: StandardWalletAdapterConfig) {\n    this.#wallet = wallet;\n  }\n\n  get name() {\n    return this.#wallet.name;\n  }\n\n  get icon() {\n    return this.#wallet.icon;\n  }\n\n  get wallet() {\n    return this.#wallet;\n  }\n\n  async getAccounts() {\n    return this.#wallet.accounts;\n  }\n\n  async connect() {\n    try {\n      if (this.connected || this.connecting) return;\n      this.connecting = true;\n\n      this.#walletEventUnsubscribe = this.#wallet.features[\n        \"standard:events\"\n      ].on(\"change\", async ({ accounts }) => {\n        if (accounts) {\n          this.connected = accounts.length > 0;\n          await this.#notifyChanged();\n        }\n      });\n\n      if (!this.#wallet.accounts.length) {\n        await this.#wallet.features[\"standard:connect\"].connect();\n      }\n\n      if (!this.#wallet.accounts.length) {\n        throw new Error(\"No wallet accounts found\");\n      }\n\n      this.connected = true;\n      await this.#notifyChanged();\n    } finally {\n      this.connecting = false;\n    }\n  }\n\n  async disconnect() {\n    if (this.#wallet.features[\"standard:disconnect\"]) {\n      await this.#wallet.features[\"standard:disconnect\"].disconnect();\n    }\n    this.connected = false;\n    this.connecting = false;\n    if (this.#walletEventUnsubscribe) {\n      this.#walletEventUnsubscribe();\n      this.#walletEventUnsubscribe = null;\n    }\n  }\n\n  signMessage: WalletAdapter[\"signMessage\"] = (messageInput) => {\n    return this.#wallet.features[\"sui:signMessage\"].signMessage(messageInput);\n  };\n\n  signTransactionBlock: WalletAdapter[\"signTransactionBlock\"] = (\n    transactionInput\n  ) => {\n    const version = this.#wallet.features[\"sui:signTransactionBlock\"].version;\n    if (!isFeatureCompatible(version, suiSignTransactionBlockLatestVersion)) {\n      throw new Error(\n        `Version mismatch, signTransaction feature version ${version} is not compatible with version ${suiSignTransactionBlockLatestVersion}`\n      );\n    }\n    return this.#wallet.features[\n      \"sui:signTransactionBlock\"\n    ].signTransactionBlock(transactionInput);\n  };\n\n  signAndExecuteTransactionBlock: WalletAdapter[\"signAndExecuteTransactionBlock\"] =\n    (transactionInput) => {\n      const version =\n        this.#wallet.features[\"sui:signAndExecuteTransactionBlock\"].version;\n      if (\n        !isFeatureCompatible(\n          version,\n          suiSignAndExecuteTransactionBlockLatestVersion\n        )\n      ) {\n        throw new Error(\n          `Version mismatch, signAndExecuteTransactionBlock feature version ${version} is not compatible with version ${suiSignAndExecuteTransactionBlockLatestVersion}`\n        );\n      }\n      return this.#wallet.features[\n        \"sui:signAndExecuteTransactionBlock\"\n      ].signAndExecuteTransactionBlock(transactionInput);\n    };\n\n  on: <E extends keyof WalletAdapterEvents>(\n    event: E,\n    callback: WalletAdapterEvents[E]\n  ) => () => void = (event, callback) => {\n    this.#events.on(event, callback);\n    return () => {\n      this.#events.off(event, callback);\n    };\n  };\n\n  async #notifyChanged() {\n    this.#events.emit(\"change\", {\n      connected: this.connected,\n      accounts: await this.getAccounts(),\n    });\n  }\n}\n"],"mappings":"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","names":["mitt","import_mitt","_events","mitt"]}