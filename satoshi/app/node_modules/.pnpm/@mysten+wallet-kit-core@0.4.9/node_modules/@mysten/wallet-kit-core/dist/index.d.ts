import { WalletAdapterList, WalletAdapter } from "@mysten/wallet-adapter-base";
import { StorageAdapter } from "./storage";
import { SuiSignAndExecuteTransactionBlockInput, SuiSignMessageInput, SuiSignTransactionBlockInput, WalletAccount } from "@mysten/wallet-standard";
export * from "./storage";
export interface WalletKitCoreOptions {
    adapters: WalletAdapterList;
    preferredWallets?: string[];
    storageAdapter?: StorageAdapter;
    storageKey?: string;
}
export declare enum WalletKitCoreConnectionStatus {
    DISCONNECTED = "DISCONNECTED",
    CONNECTING = "CONNECTING",
    CONNECTED = "CONNECTED",
    ERROR = "ERROR"
}
export interface InternalWalletKitCoreState {
    wallets: WalletAdapter[];
    currentWallet: WalletAdapter | null;
    accounts: readonly WalletAccount[];
    currentAccount: WalletAccount | null;
    status: WalletKitCoreConnectionStatus;
}
export interface WalletKitCoreState extends InternalWalletKitCoreState {
    isConnecting: boolean;
    isConnected: boolean;
    isError: boolean;
}
type OptionalProperties<T extends Record<any, any>, U extends keyof T> = Omit<T, U> & Partial<Pick<T, U>>;
export interface WalletKitCore {
    autoconnect(): Promise<void>;
    getState(): WalletKitCoreState;
    subscribe(handler: SubscribeHandler): Unsubscribe;
    connect(walletName: string): Promise<void>;
    selectAccount(account: WalletAccount): void;
    disconnect(): Promise<void>;
    signMessage(messageInput: OptionalProperties<SuiSignMessageInput, "account">): ReturnType<WalletAdapter["signMessage"]>;
    signTransactionBlock: (transactionInput: OptionalProperties<SuiSignTransactionBlockInput, "chain" | "account">) => ReturnType<WalletAdapter["signTransactionBlock"]>;
    signAndExecuteTransactionBlock: (transactionInput: OptionalProperties<SuiSignAndExecuteTransactionBlockInput, "chain" | "account">) => ReturnType<WalletAdapter["signAndExecuteTransactionBlock"]>;
}
export type SubscribeHandler = (state: WalletKitCoreState) => void;
export type Unsubscribe = () => void;
export declare function createWalletKitCore({ adapters, preferredWallets, storageAdapter, storageKey, }: WalletKitCoreOptions): WalletKitCore;
