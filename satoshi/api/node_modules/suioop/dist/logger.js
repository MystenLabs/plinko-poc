"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.Level = void 0;
// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0
const dotenv_1 = __importDefault(require("dotenv"));
const path_1 = __importDefault(require("path"));
const pino_1 = require("pino");
var Level;
(function (Level) {
    Level["fatal"] = "fatal";
    Level["error"] = "error";
    Level["warn"] = "warn";
    Level["info"] = "info";
    Level["debug"] = "debug";
    Level["trace"] = "trace";
    Level["silent"] = "silent";
})(Level = exports.Level || (exports.Level = {}));
/**
 * Singleton class to handle logging
 */
class Logger {
    constructor(level) {
        const pinoLogger = (0, pino_1.pino)({
            base: null,
            level,
            timestamp: () => `,"time":"${new Date().toISOString()}"`,
            pool_id: (id) => id,
            formatters: {
                level(label, number) {
                    return { level: Logger.levelsTranslator[number] };
                },
                log(object) {
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    const { ...rest } = object;
                    return rest;
                },
            },
            depthLimit: 10,
        }, process.stdout);
        this.logger = pinoLogger;
        Logger.instance = this;
    }
    /**
     * Initialize the logger instance.
     * @param level {Level} - The minimum level to log.
     */
    static initialize(level = Level.error) {
        if (!Logger.instance) {
            new Logger(level);
            return Logger.instance;
        }
        return Logger.instance;
    }
    /**
     * Wrapper method for the logging-library's log function.
     * @param level {Level} - The level to log at.
     * @param msg {string} - The message regarding the log.
     * @param pool_id {string} - The pool id to log; Used for tracing.
     */
    log(level = Level.info, msg, pool_id) {
        Logger.instance.logger[level]({ msg, pool_id });
    }
}
Logger.levelsTranslator = {
    10: 'trace',
    20: 'debug',
    30: 'info',
    40: 'warn',
    50: 'error',
    60: 'fatal',
};
dotenv_1.default.config({
    path: path_1.default.resolve(__dirname, '../test/.test.env'),
});
exports.logger = Logger.initialize(process.env.LOGGING_LEVEL);
//# sourceMappingURL=logger.js.map