import type { ExecuteTransactionRequestType, SuiClient, SuiTransactionBlockResponse, SuiTransactionBlockResponseOptions } from '@mysten/sui.js/client';
import type { Keypair } from '@mysten/sui.js/cryptography';
import type { SplitStrategy } from './splitStrategies';
import type { TransactionBlockWithLambda } from './transactions';
/**
 * A class that orchestrates the execution of transaction blocks using multiple worker pools.
 * The workers are created by splitting a main pool and are used to execute transaction blocks asynchronously without object equivocation.
 * [Note: ] The mainPool is not a worker pool and is not used for transaction block execution. It is used only for splitting.
 * The number of workers is not fixed and can be increased by splitting the main pool if the workload requires it.
 * The ExecutorServiceHandler retries the execution of the transaction block up to a specified number of times in case of errors.
 */
export declare class ExecutorServiceHandler {
    private _mainPool;
    private _workersQueue;
    private _accessQueue;
    private readonly _getWorkerTimeoutMs;
    private constructor();
    /**
     * Initializes an ExecutorServiceHandler instance.
     * @param keypair - The keypair to use for authentication.
     * @param client - The SuiClient instance to use for communication with the Sui network.
     * @param getWorkerTimeoutMs - The maximum number of milliseconds to listen for an available
     * worker from the worker queue.
     * @returns A new ExecutorServiceHandler instance.
     */
    static initialize(keypair: Keypair, client: SuiClient, getWorkerTimeoutMs?: number): Promise<ExecutorServiceHandler>;
    /**
     * Executes the given transaction block using the provided SuiClient and split strategy (if any).
     * Retries the execution up to the specified number of times in case of errors.
     *
     * Note that the execution is asynchronous and the result is returned as a Promise.
     * This means that you can execute multiple transaction blocks in parallel **without**
     * equivocating objects, as long as the splitStrategy permits it.
     * @param txb The transaction block to execute.
     * @param client The SuiClient instance is to use it for execution.
     * @param splitStrategy The SplitStrategy used to determine how a new worker pool will be split
     * from the main pool in case a new worker is needed to execute the transaction.
     * @param options (Optional) The SuiTransactionBlockResponseOptions to use for executing the transaction block.
     * @param requestType (Optional) The ExecuteTransactionRequestType to use for executing the transaction block.
     * @param retries The maximum number of retries in case of errors (default: 3).
     * @returns A Promise that resolves to the result of the transaction block execution.
     * @throws An error if all retries fail.
     */
    execute(txb: TransactionBlockWithLambda, client: SuiClient, splitStrategy?: SplitStrategy, options?: SuiTransactionBlockResponseOptions, requestType?: ExecuteTransactionRequestType, retries?: number): Promise<SuiTransactionBlockResponse>;
    /**
     * Helper function of execute(). Contains the main logic for executing a transaction block,
     * including getting an available worker from the workers array, updating the workerPool status, etc.
     * @param flowId - flowId for logging purposes
     * @param txb The transaction block to execute.
     * @param client The SuiClient to use for executing the transaction block.
     * @param options (Optional) The SuiTransactionBlockResponseOptions to use for executing the transaction block.
     * @param requestType (Optional) The ExecuteTransactionRequestType to use for executing the transaction block.
     * @param splitStrategy (Optional) The SplitStrategy to use for splitting the main pool and getting a new worker pool.
     * @returns A Promise that resolves to the SuiTransactionBlockResponse object returned by executing the transaction block.
     */
    private executeFlow;
    /**
     * Returns an available worker from the worker queue, or undefined if none are available within the timeout period.
     * @returns {Pool | undefined} - An available worker from the worker queue,
     * or undefined if none are available within the timeout period.
     */
    private getAWorker;
    /**
     * Adds a new worker pool to the worker queue.
     * @param flowId - flowId for logging purposes
     * @param client - The SuiClient instance to use it for the execution of transactions by the new worker pool.
     * @param splitStrategy - (Optional) The SplitStrategy to use for splitting the main pool and creating the new pool.
     */
    private addWorker;
    /**
     * Passes the given function to the access queue to ensure thread safety of mainPool.
     * @param fn - The function to pass to the access queue.e.g., this._mainPool.addWorker(...)
     * @private
     */
    private passToAccessQueue;
}
