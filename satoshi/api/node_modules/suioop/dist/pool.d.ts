import type { ExecuteTransactionRequestType, SuiClient, SuiTransactionBlockResponse, SuiTransactionBlockResponseOptions } from '@mysten/sui.js/client';
import type { Keypair } from '@mysten/sui.js/cryptography';
import type { TransactionBlock } from '@mysten/sui.js/transactions';
import type { SplitStrategy } from './splitStrategies';
import type { PoolObjectsMap } from './types';
import type { TransactionBlockWithLambda } from './transactions';
/**
 * A class representing a pool of Sui objects and gas coins.
 * Multiple pools are used by ExecutorServiceHandler to
 * execute transactions asynchronously.
 */
export declare class Pool {
    readonly id: string;
    private _cursor;
    private readonly _objectGenerator;
    private _keypair;
    private _objects;
    private _gasCoins;
    private constructor();
    static generateShortGUID(): string;
    /**
     * Creates a new Pool instance and fetches an initial batch of objects.
     * The objects are fetched so that the pool is ready to be split.
     * @param input - An object containing the keypair and client to use.
     * @returns A Promise that resolves with the newly created Pool instance.
     */
    static full(input: {
        keypair: Keypair;
        client: SuiClient;
    }): Promise<Pool>;
    /**
     * Fetches a batch of objects from the object generator and adds them to the pool.
     * Also extracts any gas coins associated with the objects and adds them to the pool's gas coin collection.
     * @returns A boolean indicating whether the fetch was successful or not.
     */
    private fetchObjects;
    /**
     * Creates a generator that yields batches of objects owned by the pool's creator.
     * @generator
     * @async
     * @param {Object} input - An object containing the owner and client parameters.
     * @param {string} input.owner - The owner of the objects to retrieve.
     * @param {SuiClient} input.client - The SuiClient instance to use for retrieving the objects.
     * @yields {Map<string, ObjectReference>} A Map containing the object references for each batch of objects retrieved.
     * @throws {Error} If an object's data is undefined.
     */
    objectBatchGenerator(input: {
        owner: string;
        client: SuiClient;
    }): AsyncGenerator<PoolObjectsMap, void, unknown>;
    /**
     * Lazily splits off a new Pool using the split strategy provided.
     * By lazy, we mean that the objects are fetched by the blockchain only when needed.
     * Initially, we try to split the pool using the objects that are already in the pool.
     * If the split strategy does not succeed/complete, then we fetch more objects and
     * try to split those as well. We repeat this process until the split strategy
     * succeeds, or we run out of objects to fetch.
     * @splitStrategy the strategy used to split the pool's objects and coins
     * @returns the new Pool with the objects and coins that were split off
     */
    split(client: SuiClient, splitStrategy?: SplitStrategy): Promise<Pool>;
    /**
     * Splits off the pool's objects map into two new maps.
     * One for the current pool (the ones with the objects to keep),
     * and one for the new pool (the ones to give).
     * The split strategy determines in which map each object will be moved to.
     * @param splitStrategy determines which objects will be moved to the new pool.
     * @returns the map of objects that will be assigned to the new pool
     */
    splitObjects(splitStrategy: SplitStrategy): PoolObjectsMap;
    /**
     * Merges the objects of poolToMerge to this pool.
     * @param poolToMerge The pool whose objects will be merged to this pool.
     */
    merge(poolToMerge: Pool): void;
    /**
     * Signs and executes a transaction block using the provided client and options.
     * @param input An object containing the client, transaction block, options, and request type.
     * @returns A promise that resolves to a SuiTransactionBlockResponse object.
     * @throws An error if any of the objects in the transaction block are not owned by the pool's creator,
     * or if there are no SUI coins in the pool to use as gas payment,
     * or if the dry run of the transaction block fails.
     */
    signAndExecuteTransactionBlock(input: {
        client: SuiClient;
        transactionBlockLambda: TransactionBlockWithLambda;
        options?: SuiTransactionBlockResponseOptions;
        requestType?: ExecuteTransactionRequestType;
    }): Promise<SuiTransactionBlockResponse>;
    /**
     * After the transaction block execution, updates the pool with new references,
     * if the owner of the reference is the same as the signer address.
     * @param newRefs An array of OwnedObjectRef objects representing the new references to add to the pool.
     */
    private updatePool;
    /**
     * Removes the given object references from the pool.
     * Called after a transaction block execution for wrapped or deleted objects.
     * @param newRefs - The object references to remove from the pool.
     */
    private removeFromPool;
    private updateCoins;
    /**
     * Checks if all inputs in the transaction block are owned by the pool's creator or are immutable.
     * @param txb - The transaction block to check.
     * @param client - The SuiClient instance to use for checking immutability.
     * @returns A Promise that resolves to a boolean indicating whether all inputs are owned by the pool's creator or are immutable.
     */
    checkTotalOwnership(txb: TransactionBlock, client: SuiClient): Promise<boolean>;
    /**
     * Check if the id of an object is in the object pool.
     * @param id the object id to check
     * @returns true if the object is in the pool, false otherwise
     */
    private isInsidePool;
    get objects(): PoolObjectsMap;
    get gasCoins(): PoolObjectsMap;
    deleteObjects(): void;
    /**
     * Filters all the coins from pool's objects.
     * @param fromObjects - The pool of objects to extract coins from.
     * @returns A new pool of objects containing only the coins.
     * @throws An error if there are no coins in the pool.
     */
    static extractCoins(fromObjects: PoolObjectsMap): PoolObjectsMap;
    /**
     * Looks up the pool for an object of the given type
     * and returns its object id.
     * @param type
     * @private
     */
    private getObjectOfType;
    get keypair(): Keypair;
    set keypair(value: Keypair);
}
