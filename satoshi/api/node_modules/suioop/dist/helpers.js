"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCoin = exports.isImmutable = void 0;
/**
 * Checks if an object is "Immutable" by looking up its data on the blockchain.
 * @param objectId - The ID of the object to check.
 * @param client - The SuiClient instance to use for the API request.
 * @returns A Promise that resolves to a boolean indicating whether the object is owned by an "Immutable" owner.
 * @throws An error if the "owner" field of the object cannot be extracted.
 */
async function isImmutable(objectId, client) {
    const obj = await client.getObject({
        id: objectId,
        options: {
            showOwner: true,
        },
    });
    const objectOwner = obj?.data?.owner;
    if (!objectOwner) {
        throw new Error(`Could not extract "owner" field of object ${objectId}`);
    }
    return objectOwner == 'Immutable';
}
exports.isImmutable = isImmutable;
/**
 * Checks if the given object type is a coin.
 * Defaults to checking if the object type is a SUI (gas) coin.
 * @param objectType The object type to check.
 * @param ofType The expected object type.
 * @returns True if the object type is a coin, false otherwise.
 */
function isCoin(objectType, ofType = '0x2::coin::Coin<0x2::sui::SUI>') {
    return objectType === ofType;
}
exports.isCoin = isCoin;
//# sourceMappingURL=helpers.js.map