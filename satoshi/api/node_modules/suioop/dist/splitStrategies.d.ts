import type { PoolObject } from './types';
/**
 * A strategy containing the rules that determine how the split of the pool will be done.
 *
 * - pred: A predicate function used to split the pool's objects and coins into a new pool.
 * This predicate is called for each object, and depending on what it returns,
 * the object will be moved to the new pool, stay in the current pool, or the split will be terminated.
 * The predicate should return:
 * 1. `true`, if the object will be moved to the new Pool
 * 2. `false`, if the object stays in `this` Pool
 * 3. `null`, if the split should be terminated and the new Pool should be returned immediately,
 * with the remaining unchecked objects being kept to the initial pool.
 *
 * [WARNING] If you want to implement a custom strategy, make sure that the predicate
 * will select at least one coin to be moved to the new pool, otherwise the transaction block
 * will not be able to determine the gas payment and will fail.
 *
 * - succeeded: A function that is called after the split is done to check if the split utilized the strategy as supposed to.
 */
export type SplitStrategy = {
    pred: (obj: PoolObject | undefined) => boolean | null;
    /**
     * Call this function after the split is done to check if the split utilized the strategy as supposed to.
     * Used in order to decide if it should be retried by loading more objects for the strategy to iterate over.
     * @returns A boolean indicating if the split succeeded or not.
     */
    succeeded: () => boolean;
};
/**
 * The DefaultSplitStrategy is used when no other strategy is provided.
 * It moves to the new pool enough gas (SUI) coins so that the sum of their
 * balances is greater or equal a specific threshold.
 */
export declare class DefaultSplitStrategy implements SplitStrategy {
    static readonly defaultMinimumBalance = 400000000;
    private readonly minimumBalance;
    private balanceSoFar;
    constructor(minimumBalance?: number);
    pred(obj: PoolObject | undefined): boolean | null;
    succeeded(): boolean;
}
/**
 * The IncludeAdminCapStrategy is used when the pool needs to contain an AdminCap object.
 * It moves to the new pool enough gas coins to fulfill the needed balance,
 * and one AdminCap object of the specified package.
 */
export declare class IncludeAdminCapStrategy implements SplitStrategy {
    private readonly adminCapIdentifier;
    private readonly packageId;
    private readonly minimumBalance;
    private balanceSoFar;
    private adminCapIncluded;
    /**
     * Creates a new instance of the Pool class.
     * @param packageId - The ID of the package containing the AdminCap.
     * @param minimumBalance - The minimum balance of the pool
     * @param adminCapIdentifier - A name used to identify the AdminCap object.
     * (pool balance = sum of its' gas coin balances).
     */
    constructor(packageId: string, minimumBalance?: number, adminCapIdentifier?: string);
    pred(obj: PoolObject | undefined): boolean | null;
    succeeded(): boolean;
}
