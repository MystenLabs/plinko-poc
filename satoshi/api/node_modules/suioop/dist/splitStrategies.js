"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncludeAdminCapStrategy = exports.DefaultSplitStrategy = void 0;
// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0
const helpers_1 = require("./helpers");
/**
 * The DefaultSplitStrategy is used when no other strategy is provided.
 * It moves to the new pool enough gas (SUI) coins so that the sum of their
 * balances is greater or equal a specific threshold.
 */
class DefaultSplitStrategy {
    constructor(minimumBalance = DefaultSplitStrategy.defaultMinimumBalance) {
        this.balanceSoFar = 0;
        this.minimumBalance = minimumBalance;
    }
    pred(obj) {
        if (!obj)
            throw new Error('No object found!.');
        if (this.balanceSoFar >= this.minimumBalance) {
            return null;
        }
        if ((0, helpers_1.isCoin)(obj.type)) {
            this.balanceSoFar += obj.balance ?? 0;
            return true;
        }
        else {
            return false;
        }
    }
    succeeded() {
        return this.balanceSoFar >= this.minimumBalance;
    }
}
exports.DefaultSplitStrategy = DefaultSplitStrategy;
DefaultSplitStrategy.defaultMinimumBalance = 400000000;
/**
 * The IncludeAdminCapStrategy is used when the pool needs to contain an AdminCap object.
 * It moves to the new pool enough gas coins to fulfill the needed balance,
 * and one AdminCap object of the specified package.
 */
class IncludeAdminCapStrategy {
    /**
     * Creates a new instance of the Pool class.
     * @param packageId - The ID of the package containing the AdminCap.
     * @param minimumBalance - The minimum balance of the pool
     * @param adminCapIdentifier - A name used to identify the AdminCap object.
     * (pool balance = sum of its' gas coin balances).
     */
    constructor(packageId, minimumBalance = DefaultSplitStrategy.defaultMinimumBalance, adminCapIdentifier = 'AdminCap') {
        this.balanceSoFar = 0;
        this.adminCapIncluded = false;
        this.packageId = packageId;
        this.minimumBalance = minimumBalance;
        this.adminCapIdentifier = adminCapIdentifier;
    }
    pred(obj) {
        if (!obj)
            throw new Error('No object found!.');
        const terminateWhen = this.balanceSoFar >= this.minimumBalance && this.adminCapIncluded;
        if (terminateWhen) {
            return null;
        }
        if (!this.adminCapIncluded &&
            obj.type.includes(this.adminCapIdentifier) &&
            obj.type.includes(this.packageId)) {
            this.adminCapIncluded = true;
            return true;
        }
        if (!(this.balanceSoFar >= this.minimumBalance) && (0, helpers_1.isCoin)(obj.type)) {
            this.balanceSoFar += obj.balance ?? 0;
            return true;
        }
        else {
            return false;
        }
    }
    succeeded() {
        return this.balanceSoFar >= this.minimumBalance && this.adminCapIncluded;
    }
}
exports.IncludeAdminCapStrategy = IncludeAdminCapStrategy;
//# sourceMappingURL=splitStrategies.js.map